/**
 * ðŸŽ¨ Interface utilisateur - Utilitaires
 *
 * GÃ¨re l'apparence des Ã©lÃ©ments de progression sur la page.
 * Marque les leÃ§ons complÃ©tÃ©es, calcule les statistiques et gÃ¨re les interactions.
 */

// ===============================
// INTERFACE UTILISATEUR - utils.ts
// ===============================
//
// RÃ”LE : Change l'apparence des Ã©lÃ©ments sur la page
//
// COMMENT Ã‡A MARCHE :
// 1. Marque les leÃ§ons dÃ©jÃ  faites (cochÃ©es)
// 2. Calcule et affiche les statistiques (ex: 5/10)
// 3. GÃ¨re les loaders (petits indicateurs de chargement)
// 4. Ã‰coute les clics sur les boutons/checkboxes
//
// Ã‰LÃ‰MENTS HTML UTILISÃ‰S :
// - [iw-progress-target] : ID de la leÃ§on
// - [iw-progress-watched] : true/false (faite ou pas)
// - [iw-progress-trigger] : bouton ou checkbox
// ===============================

// ===============================
// MARQUAGE DES LEÃ‡ONS
// ===============================

/**
 * Marque les leÃ§ons dÃ©jÃ  faites comme cochÃ©es
 * @param lessonIds - Liste des IDs des leÃ§ons faites
 */
export function markCompletedLessons(lessonIds: string[]) {
  // On ne log plus chaque Ã©tape, juste l'action globale si besoin
  // console.log('ðŸŽ¯ Marquage des leÃ§ons:', lessonIds);

  lessonIds.forEach((id: string) => {
    // Trouver tous les Ã©lÃ©ments avec cet ID de leÃ§on
    const elements = document.querySelectorAll(`[iw-progress-target="${id}"]`);
    elements.forEach((el) => {
      el.setAttribute('iw-progress-watched', 'true');
    });
  });
}

// ===============================
// CALCUL DES STATISTIQUES
// ===============================

/**
 * Compte combien de leÃ§ons sont faites
 * @returns {total, completed, percentage} - Les statistiques
 */

export function getProgressStats(completedCount: number) {
  const triggers = document.querySelectorAll('[iw-progress-trigger]');
  const total = triggers.length;

  return {
    total,
    completed: completedCount,
    percentage: total > 0 ? Math.round((completedCount / total) * 100) : 0,
  };
}

/**
 * Affiche les statistiques dans la console
 * @param stats - Les statistiques Ã  afficher
 */
export function logProgress(stats: { completed: number; total: number; percentage: number }) {
  // On garde un seul log utile pour la progression globale
  console.log(`ðŸ“Š Progression: ${stats.completed}/${stats.total} (${stats.percentage}%)`);
}

// ===============================
// GESTION DES LOADERS
// ===============================

/**
 * Affiche un loader sur un Ã©lÃ©ment
 * @param element - L'Ã©lÃ©ment Ã  loader
 * @param lessonId - L'ID de la leÃ§on
 */
export function showLoader(element: Element, lessonId: string) {
  // Marquer l'Ã©lÃ©ment comme en cours de chargement
  element.setAttribute('iw-progress-trigger-loader', 'true');

  // Si c'est un bouton, loader aussi les checkboxes associÃ©es
  if (element.getAttribute('iw-progress-trigger') === 'button') {
    document
      .querySelectorAll(`[iw-progress-trigger="checkbox"][iw-progress-target="${lessonId}"]`)
      .forEach((el) => el.setAttribute('iw-progress-trigger-loader', 'true'));
  }
}

/**
 * Cache le loader sur un Ã©lÃ©ment
 * @param element - L'Ã©lÃ©ment Ã  dÃ©loader
 * @param lessonId - L'ID de la leÃ§on
 */
export function hideLoader(element: Element, lessonId: string) {
  // Marquer l'Ã©lÃ©ment comme plus en cours de chargement
  element.setAttribute('iw-progress-trigger-loader', 'false');

  // Si c'est un bouton, dÃ©loader aussi les checkboxes associÃ©es
  if (element.getAttribute('iw-progress-trigger') === 'button') {
    document
      .querySelectorAll(`[iw-progress-trigger="checkbox"][iw-progress-target="${lessonId}"]`)
      .forEach((el) => el.setAttribute('iw-progress-trigger-loader', 'false'));
  }
}

// ===============================
// MISE Ã€ JOUR DE L'APPARENCE
// ===============================

/**
 * Change l'apparence d'une leÃ§on (cochÃ©e/dÃ©cochÃ©e)
 * @param lessonId - L'ID de la leÃ§on
 * @param isCompleted - true = cochÃ©e, false = dÃ©cochÃ©e
 */
export function updateLessonState(lessonId: string, isCompleted: boolean) {
  // Trouver tous les Ã©lÃ©ments avec cet ID et changer leur apparence
  document
    .querySelectorAll(`[iw-progress-target="${lessonId}"]`)
    .forEach((el) => el.setAttribute('iw-progress-watched', isCompleted ? 'true' : 'false'));
}

// ===============================
// Ã‰COUTE DES CLICS
// ===============================

/**
 * Ã‰coute les clics sur tous les Ã©lÃ©ments de progression
 * @param memberId - L'ID du membre connectÃ©
 * @param onProgressClick - La fonction Ã  appeler quand on clique
 */
export function setupClickListeners(
  memberId: string,
  onProgressClick: (element: Element, memberId: string) => Promise<void>
) {
  // Trouver tous les Ã©lÃ©ments cliquables
  document.querySelectorAll('[iw-progress-trigger]').forEach((element) => {
    // Ajouter un Ã©couteur de clic
    element.addEventListener('click', async function (this: Element) {
      // Appeler la fonction de gestion du clic
      await onProgressClick(this, memberId);
    });
  });
}
