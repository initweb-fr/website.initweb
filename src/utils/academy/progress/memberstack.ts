/**
 * üîÑ Synchronisation Memberstack
 *
 * G√®re la mise √† jour du champ progression dans Memberstack.
 * Synchronise les donn√©es de progression avec le syst√®me Memberstack.
 */

// ===============================
// SYNCHRONISATION MEMBERSTACK - memberstack.ts
// ===============================
//
// R√îLE : Met √† jour le champ progression dans Memberstack
//
// COMMENT √áA MARCHE :
// 1. R√©cup√®re le membre connect√©
// 2. Met √† jour le champ customFields.progression
// 3. G√®re les erreurs de synchronisation
// ===============================

/**
 * Met √† jour le champ progression dans Memberstack
 * @param progressionJSON - Le JSON de progression √† sauvegarder
 * @returns true si √ßa a march√©, false sinon
 */
export async function updateMemberstackProgression(progressionJSON: any) {
  try {
    const memberstack = window.$memberstackDom;
    if (!memberstack) {
      console.error('‚ùå Memberstack non disponible');
      return false;
    }

    const currentMember = await memberstack.getCurrentMember();
    if (!currentMember?.data?.id) {
      console.error('‚ùå Aucun membre connect√©');
      return false;
    }

    // On ne log plus la progression √† chaque mise √† jour

    // Mettre √† jour le champ customFields.progression
    const { error } = await (memberstack as any).updateMember({
      customFields: {
        progression: progressionJSON,
      },
    });

    if (error) {
      console.error('‚ùå Erreur mise √† jour Memberstack:', error);
      return false;
    }

    // Succ√®s silencieux (pas de console.log)
    return true;
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale mise √† jour Memberstack:', error);
    return false;
  }
}
